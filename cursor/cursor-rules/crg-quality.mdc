---
description: Code quality and performance standards for maintainable and efficient applications
globs:
alwaysApply: true
---
# Performance & Quality Standards

## Core Quality Principles
- Focus on correct functionality before optimization
- Write clean, simple, readable code
- Ensure reliability as the top priority
- Test thoroughly after every change
- Document code and implementation decisions

## Code Quality Standards
### Readability
- Use clear, consistent naming conventions
- Keep functions and methods small and focused
- Maintain consistent code formatting
- Use appropriate comments to explain why, not what
- Follow language-specific style guidelines

### Maintainability
- Keep technical debt low
- Refactor regularly to improve code quality
- Eliminate duplicate code
- Use design patterns appropriately
- Document complex algorithms and decisions

### Reliability
- Add comprehensive error handling
- Validate inputs at system boundaries
- Design for failure recovery
- Add appropriate logging
- Consider edge cases and potential failures

## Performance Considerations
### Optimization Approach
- Profile before optimizing
- Identify actual bottlenecks with measurements
- Focus on high-impact areas first
- Document performance requirements
- Test performance changes with benchmarks

### Common Performance Patterns
- Use appropriate data structures
- Optimize database queries
- Implement caching strategically
- Consider I/O and network operations
- Profile memory usage

## Quality Assurance
### Testing Strategy
- Write tests for all new functionality
- Maintain high test coverage
- Include unit, integration, and system tests
- Test edge cases and error conditions
- Automate tests wherever possible

### Review Process
- Complete code review checklist before completion
- Verify all necessary imports
- Remove TODOs and placeholders
- Ensure implementation completeness
- Validate error handling
- Update relevant documentation

## Documentation Requirements
- Document performance considerations
- Explain optimization decisions
- Record benchmarking results
- Note performance trade-offs
- Document quality assurance process

## Integration & Testing Quality
### Real Integration Rule
- **NEVER use mock data or mock services** unless explicitly requested
- Implement against real services and APIs always
- Test with real data and actual service responses
- Fix integration issues rather than bypassing with mocks
- Document where real services are running: [local-development-ports.md](mdc:docs/development/local-development-ports.md)
- Ensure proper error handling for real-world conditions
- Verify behavior with actual services before completion
- Only consider mocks when explicitly instructed by user
