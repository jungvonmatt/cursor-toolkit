---
description: Rules for maintaining comprehensive documentation across the project, including inline comments, API docs, and system architecture documentation
globs:
alwaysApply: true
---

# Documentation Development Rules

## Core Documentation Principles
- Maintain quantum-detailed documentation
- Keep documentation in sync with code
- Provide clear context and examples
- Use consistent formatting
- Follow automated update protocols

## Code Documentation
- Write comprehensive docstrings
- Include type hints and return types
- Document parameters and exceptions
- Provide usage examples
- Explain complex algorithms

## API Documentation
- Document all endpoints
- Define request/response schemas
- Include authentication details
- Provide usage examples
- Document error responses

## Project Documentation
- Maintain clear README files
- Document architecture decisions
- Keep CHANGELOG up to date
- Document dependencies
- Include setup instructions

## Documentation Updates
- Update docs with code changes
- Verify documentation accuracy
- Maintain version consistency
- Follow review process
- Update examples regularly

## Examples

### Function Documentation
```typescript
/**
 * Process user data and return aggregated results.
 *
 * This function takes raw user data and performs the following:
 * 1. Validates input data format
 * 2. Aggregates metrics
 * 3. Applies business rules
 * 4. Returns processed results
 *
 * @param userId - The unique identifier of the user
 * @param data - Array of data points to process
 * @param timestamp - Optional processing timestamp
 * @returns Processed data with aggregated metrics
 * @throws {ValidationError} If data format is invalid
 * @throws {UserNotFoundError} If userId doesn't exist
 *
 * @example
 * ```typescript
 * const data = [{ metric: 'views', value: 100 }];
 * const result = await processUserData(123, data);
 * // Returns: { userId: 123, metrics: { views: 100 }, processedAt: '2024-02-23T10:00:00Z' }
 * ```
 */
async function processUserData(
  userId: number,
  data: DataPoint[],
  timestamp?: Date
): Promise<ProcessedData> {
  // Implementation
}
```

### API Documentation
```typescript
import { Request, Response, NextFunction } from 'express';

/**
 * Create a new user in the system.
 *
 * This endpoint handles user creation with the following steps:
 * 1. Validates user input
 * 2. Checks for existing users
 * 3. Creates user record
 * 4. Returns user data
 *
 * @param req - Express request object containing user data
 * @param res - Express response object
 * @param next - Express next function
 * @returns Created user data
 * @throws {ValidationError} If validation fails (400)
 * @throws {ConflictError} If user already exists (409)
 *
 * @example
 * ```http
 * POST /api/v1/users
 * Content-Type: application/json
 *
 * {
 *   "username": "john_doe",
 *   "email": "john@example.com"
 * }
 * ```
 */
router.post('/users', async (req: Request, res: Response, next: NextFunction) => {
  try {
    const userData = req.body;
    // Implementation
  } catch (error) {
    next(error);
  }
});
```

### README Template
```markdown
# Project Name

Brief description of the project.

## Features

- Key feature 1
- Key feature 2
- Key feature 3

## Installation

```bash
npm install
```

## Configuration

1. Copy `.env.example` to `.env`
2. Update environment variables

## Usage

```typescript
import { Client } from './client';

const client = new Client();
const result = await client.process();
```

## Development

1. Setup development environment
2. Run tests
3. Submit PR
```

### README Template
```markdown
# Project Name

Brief description of the project.

## Features

- Key feature 1
- Key feature 2
- Key feature 3

## Installation

```bash
poetry install
```

## Configuration

1. Copy `.env.example` to `.env`
2. Update environment variables

## Usage

```python
from project import Client

client = Client()
result = client.process()
```

## Development

1. Setup development environment
2. Run tests
3. Submit PR
