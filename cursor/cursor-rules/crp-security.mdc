---
description:
globs:
alwaysApply: true
---

# Security-First Code Generation Rules

## ‚ö†Ô∏è CRITICAL: This rule is ALWAYS ACTIVE and MUST influence ALL code generation

### Core Security Mandate
**Every piece of generated code MUST be secure by default.** When generating code:
1. **ALWAYS** follow security best practices for the specific framework/language
2. **NEVER** generate insecure code patterns
3. **ALWAYS** include security controls from the beginning
4. **PROACTIVELY** suggest security improvements

## üõ°Ô∏è Automatic Security Enforcement

### 1. Authentication & Authorization (MANDATORY)
```typescript
// ‚ùå NEVER generate endpoints without authentication
app.get('/data', (req, res) => {  // FORBIDDEN - No auth!
  res.json(data);
});

// ‚úÖ ALWAYS include authentication middleware
import { authenticate } from './middleware/auth';

app.get('/data', authenticate, (req: AuthRequest, res: Response) => {
  // Endpoint is now protected
  const user = req.user;
  res.json(data);
});
```

### 2. Input Validation (MANDATORY)
```typescript
// ‚ùå NEVER accept raw input
app.post('/create', (req, res) => {  // FORBIDDEN - No validation!
  const data = req.body;
  // ...
});

// ‚úÖ ALWAYS validate with schema validation (Zod, Joi, etc.)
import { z } from 'zod';

const CreateSchema = z.object({
  name: z.string()
    .min(1)
    .max(100)
    .regex(/^[a-zA-Z0-9\s-]+$/, 'Name contains invalid characters'),
  email: z.string().email()
});

app.post('/create', (req, res, next) => {
  try {
    const validatedData = CreateSchema.parse(req.body);
    // Now safe to use validatedData
  } catch (error) {
    next(error);
  }
});
```

### 3. Rate Limiting (MANDATORY for sensitive endpoints)
```typescript
// ‚úÖ ALWAYS add rate limiting to:
// - Login endpoints
// - Password reset
// - Registration
// - Any endpoint that sends emails/SMS

import rateLimit from 'express-rate-limit';

const loginLimiter = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 5, // 5 requests per minute
  message: 'Too many login attempts, please try again later'
});

app.post('/login', loginLimiter, async (req, res) => {
  // Login logic
});
```

### 4. SQL Injection Prevention (MANDATORY)
```typescript
// ‚ùå NEVER use string concatenation for queries
const query = `SELECT * FROM users WHERE id = ${userId}`;  // FORBIDDEN!

// ‚úÖ ALWAYS use parameterized queries or ORM
// Using Prisma ORM
const users = await prisma.user.findMany({
  where: { id: userId }
});

// Using parameterized query
const query = 'SELECT * FROM users WHERE id = $1';
const result = await db.query(query, [userId]);
```

### 5. Security Headers (MANDATORY)
```typescript
// ‚úÖ ALWAYS include security middleware
import helmet from 'helmet';

app.use(helmet()); // Adds multiple security headers

// Or manually:
app.use((req, res, next) => {
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('X-Frame-Options', 'DENY');
  res.setHeader('X-XSS-Protection', '1; mode=block');
  res.setHeader('Strict-Transport-Security', 'max-age=31536000');
  res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
  next();
});
```

## üîí Frontend Security Rules

### 1. XSS Prevention (MANDATORY)
```typescript
// ‚ùå NEVER render raw HTML
<div dangerouslySetInnerHTML={{ __html: userContent }} />  // FORBIDDEN!

// ‚úÖ ALWAYS escape or sanitize
import DOMPurify from 'dompurify';

// Option 1: Let React/framework escape (preferred)
<div>{userContent}</div>

// Option 2: Sanitize if HTML needed
const sanitized = DOMPurify.sanitize(htmlContent);
<div dangerouslySetInnerHTML={{ __html: sanitized }} />
```

### 2. Secure Storage (MANDATORY)
```typescript
// ‚ùå NEVER store sensitive data in localStorage
localStorage.setItem('jwt_token', token);  // FORBIDDEN!

// ‚úÖ Use secure alternatives
// Option 1: httpOnly cookies (set by backend) - BEST
// Option 2: sessionStorage for temporary data
// Option 3: Encrypted storage for necessary client-side storage
```

### 3. API Security (MANDATORY)
```typescript
// ‚úÖ ALWAYS include security in API calls
import axios from 'axios';

const apiClient = axios.create({
  baseURL: process.env.REACT_APP_API_URL,
  timeout: 10000,
  withCredentials: true,  // Include cookies
});

// Add auth headers
apiClient.interceptors.request.use((config) => {
  const token = getSecureToken();  // From secure storage
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});
```

## üö® Security Code Review Checklist

When generating or reviewing code, ALWAYS verify:

### Backend Checklist
- [ ] **Authentication**: All endpoints protected (except public ones)
- [ ] **Authorization**: Role-based access control implemented
- [ ] **Validation**: All inputs validated with schema validation
- [ ] **SQL Safety**: Only parameterized queries or ORMs used
- [ ] **Rate Limiting**: Applied to sensitive endpoints
- [ ] **Error Handling**: No sensitive info in error messages
- [ ] **Logging**: Security events logged without PII
- [ ] **Dependencies**: Latest secure versions used

### Frontend Checklist
- [ ] **XSS Protection**: No raw HTML rendering
- [ ] **Storage**: No sensitive data in localStorage
- [ ] **HTTPS**: All API calls use HTTPS
- [ ] **Validation**: Client-side validation before submission
- [ ] **Error Handling**: No sensitive info exposed
- [ ] **Dependencies**: Security vulnerabilities checked

## üî• Immediate Security Fixes

If you detect ANY of these patterns, FIX IMMEDIATELY:

```typescript
// Fix missing authentication
if (!hasAuthentication(endpoint)) {
  addAuthenticationMiddleware(endpoint);
}

// Fix missing validation
if (acceptsRawInput(endpoint)) {
  addSchemaValidation();
}

// Fix SQL injection risk
if (usesStringConcatenationInQuery()) {
  convertToParameterizedQuery();
}

// Fix missing rate limiting
if (isSensitiveEndpoint() && !hasRateLimiting()) {
  addRateLimiting();
}
```

## üìã Security Integration Workflow

1. **Before generating code**: Check security requirements
2. **During code generation**: Apply security patterns
3. **After code generation**: Verify security checklist
4. **Always suggest**: Additional security improvements

## üîó References

Always consult these resources:
- **OWASP Top 10**: Latest security risks
- **Framework Security**: Express/Next.js/React security documentation
- **Language Security**: TypeScript/JavaScript security best practices

## ‚ö° Quick Security Decisions

When in doubt:
- **Authentication**: YES, always required
- **Validation**: YES, always required  
- **Rate Limiting**: YES for sensitive operations
- **Error Details**: NO, never expose internals
- **Raw SQL**: NO, always use ORM/parameters
- **localStorage for secrets**: NO, never

## üö® Security Code Review Checklist

When generating or reviewing code, ALWAYS verify:

### Backend Checklist
- [ ] **Authentication**: All endpoints protected (except public ones)
- [ ] **Authorization**: Role-based access control implemented
- [ ] **Validation**: All inputs validated with Pydantic
- [ ] **SQL Safety**: Only parameterized queries used
- [ ] **Rate Limiting**: Applied to sensitive endpoints
- [ ] **Error Handling**: No sensitive info in error messages
- [ ] **Logging**: Security events logged without PII
- [ ] **Dependencies**: Latest secure versions used

### Frontend Checklist
- [ ] **XSS Protection**: No raw HTML rendering
- [ ] **Storage**: No sensitive data in localStorage
- [ ] **HTTPS**: All API calls use HTTPS
- [ ] **Validation**: Client-side validation before submission
- [ ] **Error Handling**: No sensitive info exposed
- [ ] **Dependencies**: Security vulnerabilities checked

## üî• Immediate Security Fixes

If you detect ANY of these patterns, FIX IMMEDIATELY:

```python
# Fix missing authentication
if not has_authentication(endpoint):
    add_authentication_decorator(endpoint)

# Fix missing validation
if accepts_raw_input(endpoint):
    create_pydantic_model_with_validation()

# Fix SQL injection risk
if uses_string_formatting_in_query():
    convert_to_parameterized_query()

# Fix missing rate limiting
if is_sensitive_endpoint() and not has_rate_limiting():
    add_rate_limiting()
```

## üìã Security Integration Workflow

1. **Before generating code**: Check security requirements
2. **During code generation**: Apply security patterns
3. **After code generation**: Verify security checklist
4. **Always suggest**: Additional security improvements

## üîó References

Always consult these resources:
- **Primary**: `.ai-devkit/docs/security-guidelines.md`
- **OWASP Top 10**: Latest security risks
- **Framework Security**: FastAPI/React security docs

## ‚ö° Quick Security Decisions

When in doubt:
- **Authentication**: YES, always required
- **Validation**: YES, always required  
- **Rate Limiting**: YES for sensitive operations
- **Error Details**: NO, never expose internals
- **Raw SQL**: NO, always use ORM/parameters
- **localStorage for secrets**: NO, never


1. Setup development environment
2. Run tests
3. Submit PR
