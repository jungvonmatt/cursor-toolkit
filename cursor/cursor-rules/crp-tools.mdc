---
description:
globs:
alwaysApply: true
---

# MCP Tools & Services Usage Rules

## ‚ö†Ô∏è CRITICAL: Tool Selection Principles
- Always use the most specialized tool for each task
- Never implement functionality that an MCP tool already provides
- Prefer structured tools over general-purpose code
- Use MCP tools for standardization and consistency
- Document all tool usage in memory files

## üïí Time Management
### ‚ö†Ô∏è CRITICAL: Time Function Usage
- **ALWAYS use `get_current_time` for ANY time-related operations**
- Never use programming language's built-in time functions when MCP time is available
- Specify appropriate timezone parameter based on context
- Use `convert_time` for timezone conversions
- Format:
  ```
  Time API Call:
    Tool: get_current_time
    Timezone: "Europe/Berlin"
    Purpose: [brief explanation of why time is needed]
  ```

## üîç Research & Information Gathering
### Code Research Tools
- Use dedicated research tools for:
  - `search_stackoverflow` - Programming questions and solutions
  - `search_mdn` - Web development documentation
  - `search_github` - Code examples and implementations
  - `search_npm` - JavaScript package information
  - `search_pypi` - Python package information
  - `search_all` - Comprehensive multi-source search

### Brave Web Search
- Use `mcp__brave_web_search` for general information gathering
- Use `mcp__brave_local_search` for location-based queries
- Properly document all search results in memory files
- Format:
  ```
  Web Search Call:
    Tool: mcp__brave_web_search
    Query: "[search query]"
    Purpose: [brief explanation of research goal]
  ```

## üßÆ Sequential Thinking
- Use `mcp__sequentialthinking` for complex problem-solving
- Apply for:
  - Multi-step reasoning problems
  - Decision trees with branches
  - Explorations with uncertain paths
  - Complex debugging scenarios
- Format:
  ```
  Sequential Thinking:
    Total Steps: [number]
    Current Step: [number]
    Focus: [brief description of current reasoning step]
  ```

## üìä Data Processing
### Excel Operations
- Use Excel MCP tools for spreadsheet operations:
  - `read_sheet_names` - List all sheets in workbook
  - `read_sheet_data` - Read data from Excel
  - `write_sheet_data` - Write data to Excel
- Document all data operations in memory files

### Git & GitHub
- Use GitHub MCP tools for repository operations:
  - `create_repository` - Create new repositories
  - `push_files` - Push changes to repositories
  - `search_code` - Find relevant code examples
  - And other GitHub-specific operations
- Follow standard Git workflow practices

## üîß Platform Operations
### Docker Management
- Use Docker MCP tools for container operations:
  - `create_container` - Create new Docker containers
  - `deploy_compose` - Deploy with Docker Compose
  - `get_logs` - Retrieve container logs
  - `list_containers` - List all containers

### Browser Tools
- Use BrowserTools for web interactions:
  - `getConsoleLogs` - Browser console output
  - `takeScreenshot` - Capture current view
  - `getNetworkLogs` - Analyze network activity
  - And other browser-specific operations

## üìã Tool Usage Documentation
- Document all significant tool calls in `.cursor/memory/tools.md`
- Format for tool usage documentation:
  ```
  [YYYY-MM-DD HH:MM] #tool-usage: Used [tool_name] for [purpose]
    - PARAMS: [key parameters used]
    - RESULT: [brief description of outcome]
    - CONTEXT: [brief description of situation requiring tool]
    - LINKS: [cross-reference to related memory files]
  ```

## üîÑ Tool Integration Workflow
1. **Assessment Phase**:
   - Identify task requirements
   - Match requirements to available MCP tools
   - Select most appropriate tool

2. **Usage Phase**:
   - Document intended tool usage
   - Apply tool with appropriate parameters
   - Handle tool results properly

3. **Documentation Phase**:
   - Record significant tool usages
   - Document outcomes and insights
   - Cross-reference with other memory files
