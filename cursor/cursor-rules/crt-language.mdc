---
description: Language guidelines requiring all code, comments, docs, and files to be in English, while allowing human communication in preferred language
globs: **/*.py,**/*.md,**/*.js,**/*.ts,**/*.html,**/*.css,**/*.yaml,**/*.yml,**/*.json,**/*.txt,**/*.sql
alwaysApply: false
---
# Language Guidelines

## Core Language Principles
- **CRITICAL: ALL technical content MUST be written in ENGLISH**
- Code, including variable names, function names, and class names must be in English
- Comments and docstrings must be in English
- Documentation files must be in English
- Markdown, YAML, and all text files must be in English
- Database field names and SQL queries must be in English
- API endpoints and parameters must be in English
- UI text and user-facing messages must be in English
- Commit messages must be in English
- Issue templates and GitHub issues must be in English

## Communication vs. Content Separation
- **Content-Communication Separation**: A clear distinction must be maintained:
  - **ALL CONTENT**: Must be in English (code, docs, configs, etc.)
  - **COMMUNICATION**: May be in the user's preferred language

## User Communication
- Communication with users may be in their preferred language
- Clarifying questions and discussions may occur in the user's preferred language
- Technical terminology should be consistent across languages
- When discussing technical concepts, English terms should be used even in non-English communication
- Even when communicating in another language, all generated content must be in English

## Technical Content Standards
### Code
- Variable, function, class, and module names must use English words
- Comments must be written in clear, grammatically correct English
- Docstrings must follow standard English documentation formats
- TODO comments must be in English

### Documentation
- All documentation files must be in English
- README files must be in English
- API documentation must be in English
- Architecture descriptions must be in English
- User guides must be in English (unless specifically creating localized versions)

### Configuration
- Configuration keys must use English words
- Environment variable names must be in English
- Configuration file comments must be in English
- Log messages must be in English

## Language Quality
- Use clear, professional English
- Maintain consistent terminology
- Use standard technical terms from the industry
- Prefer simple language over complex forms when possible
- Write brief, focused sentences
- Use proper grammar and punctuation
- Follow standard capitalization conventions for the specific context

## Domain-Specific Terminology
- Use established industry terms when available
- Define specialized terminology in a glossary
- Maintain consistency with terms defined in architecture documents
- For architectural concepts, use the established English terms

## Exceptions
- Localization files for UI elements may contain non-English content
- Content specifically intended for non-English environments may be in other languages
- These exceptions must be explicitly noted and approved

## Language Verification Checklist
Before submitting any content, verify:
- [ ] All code (including comments) is written in English
- [ ] All documentation is written in English
- [ ] All configuration is written in English
- [ ] Consistent terminology is used throughout
- [ ] Proper grammar and spelling are used

## Examples

### ✅ Correct Usage
```python
# Process user data and return aggregated results
def process_user_data(user_id, data):
    """
    Calculate metrics based on user activity.

    Args:
        user_id: The user identifier
        data: Activity data to process

    Returns:
        Dictionary with calculated metrics
    """
    result = {}
    for item in data:
        # Skip invalid entries
        if not item.is_valid:
            continue
        # Calculate item metrics
        result[item.name] = calculate_metrics(item)
    return result
```

### ❌ Incorrect Usage
```python
# Verarbeite Benutzerdaten und gib aggregierte Ergebnisse zurück
def verarbeite_benutzer_daten(benutzer_id, daten):
    """
    Berechne Metriken basierend auf Benutzeraktivität.

    Args:
        benutzer_id: Die Benutzerkennung
        daten: Zu verarbeitende Aktivitätsdaten

    Returns:
        Dictionary mit berechneten Metriken
    """
    ergebnis = {}
    for element in daten:
        # Überspringe ungültige Einträge
        if not element.is_valid:
            continue
        # Berechne Element-Metriken
        ergebnis[element.name] = berechne_metriken(element)
    return ergebnis
```
